# スクロールバッファの行数
set-option -g history-limit 10000

#utf setting
set-window-option -g utf8 on
set-window-option -g mode-keys vi
set-window-option -g automatic-rename off

# 256色ターミナル
set-option -g default-terminal "screen-256color"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# マウススクロール
set-option -g mode-mouse on

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
if "which reattach-to-user-namespace" "bind-key -t vi-copy y copy-pipe 'reattach-to-user-namespace pbcopy'"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
if "which reattach-to-user-namespace" "bind-key -t vi-copy Enter copy-pipe 'reattach-to-user-namespace pbcopy'"

### キーバインド
# tmuxでXmonadライクで直感的なキーバインドを設定する - Qiita
# http://qiita.com/ssh0/items/b423d65f723eecb81527
#
# Prefix key: ^g
#
# Abbreviation:
# - [key]
# - {key} <- with Prefix key
# - (key) <- with Alt (or in MacOS, Command key)
#
# prefix key ^b -> ^g
#unbind C-b
#set -g prefix C-g
#bind C-g send-prefix

# move between panes
# (xmonad like)
bind-key -n M-j select-pane -t :.+
bind-key -n M-k select-pane -t :.-
# (vim window like)
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# move between window
bind-key -n M-Right next-window
bind-key -n M-Left previous-window

# create new window
bind-key -n M-Enter new-window

# ペインを削除するには(x)、ウィンドウを削除するには(X)です。
# if文を使うことで、最後のペイン、最後のウィンドウであるときにだけ確認メッセージを表示させることができます。
#
# if session has > 1 windows in current, kill-pane without confirmation.
# But confirm before killing pane when it is the last pane in the window.
bind-key -n M-x if "tmux display -p \"#{window_panes}\" | grep ^1\$" \
    "confirm-before -p \"Kill the only pane in the window? It will kill this window too. (y/n)\" kill-pane" \
        "kill-pane"

# if session has > 1 windows in current, kill-window without confirmation.
# But confirm before killing window when it is the last window in the session. 
bind-key -n M-X if "tmux display -p \"#{session_windows}\" | grep ^1\$"\
    "confirm-before -p \"Kill the only window in this session? It will kill the session too. (y/n)\" kill-window" \
        "kill-window"

# ウィンドウ内でのペインの操作
#
# In a window:
#
#   +---------------+------------+
#   |pane1          |pane3       |
#   |               |            |
#   |               |            |
#   +---------------+            |
#   |pane2          |            |
#   |               |            |
#   |               |            |
#   +---------------+------------+
# 
# split pane:
#   - vertically         : (|)
#   - horizontally       : (-)
# select pane            : (j,k) OR click the pane with mouse
# shift pane             : (J,K)
# kill pane              : (x)
# change layout          : (Space)
# fullscreen             : (f)
# resize pane:
#             (a)
#              ↑
#        (h) ← + → (l)
#              ↓        OR drag pane-border with mouse
#             (z)
# join to another window : [Shift+Left/Right]
# join to another window : (Shift+num)
#
# split window (easily remember)
bind-key -n M-- split-window -v
bind-key -n M-| split-window -h
# vim like
bind-key s split-window -v
bind-key v split-window -h
# resize panes (xmonad like)
#bind-key -n M-h resize-pane -L 1
#bind-key -n M-z resize-pane -D 1
#bind-key -n M-a resize-pane -U 1
#bind-key -n M-l resize-pane -R 1
bind-key -n M-H resize-pane -L 1
bind-key -n M-J resize-pane -D 1
bind-key -n M-K resize-pane -U 1
bind-key -n M-L resize-pane -R 1

# zshでpbcopy
# set-option -g default-command "reattach-to-user-namespace -l zsh"

# ステータスラインカスタム関連
#
# FYI
# Status Line · zolrath/wemux Wiki : https://github.com/zolrath/wemux/wiki/Status-Line
#
# Macでtmuxのステータスラインに起動時間/ロードアベレージ/メモリ使用率を表示
# よんちゅBlog : http://d.hatena.ne.jp/yonchu/20120414/1334422075
#set -g status-attr dim
#set -g status-left-length 32
#set -g status-right-length 150
#
#set -g status-fg white
#set -g status-bg colour234
## set -g window-status-activity-attr bold
#set -g pane-border-fg colour245
#set -g pane-active-border-fg colour39
#
#set -g status-left '#[fg=colour223,bg=colour202,bold]( ꒪⌓꒪) #20(hostname -s)#[deafult] #S #[fg=colour202,bg=colour238,nobold]⮀#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]⮀'
#set -g window-status-format "#[fg=white,bg=colour234] #I #W "
#set -g window-status-current-format "#[fg=colour234,bg=colour39]⮀#[fg=colour25,bg=colour39,noreverse,bold] #I ⮁ #W #[fg=colour39,bg=colour234,bold]⮀"
## set -g status-right "#(wemux status_users)"
##
## 左部:whoami@hostname
## set -g status-left '#[fg=blue,bold][#20(whoami) No.#I-#P]#[default]'
## set -g status-left-length 20
## 右部:[2011/03/06(Sun)20:21]
#set -g status-right '#[fg=colour241]#H ⮃ #I:#P #[fg=colour31,bg=colour234,nobold]⮂#[fg=colour12,bg=colour31] Mem #(used-mem)%% ⮃ LAve.[#(loadaverage)] ⮂#[fg=colour31,bg=colour255,bold] %Y/%m/%d(%a)%H:%M#[default]'
#set -g message-attr bold
#set -g message-fg white
#set -g message-bg red
#
## percol integration, select tmux window throgh percol
#bind b split-window "tmux lsw | percol --initial-index $(tmux lsw | awk '/active.$/ {print NR-1}') | cut -d':' -f 1 | xargs tmux select-window -t"
#bind B split-window "tmux ls | percol --initial-index $(tmux ls | awk '/attached.$/ {print NR-1}') | cut -d':' -f 1 | xargs tmux switch-client -t"



